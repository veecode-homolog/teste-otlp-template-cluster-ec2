name: Observability Stack 

on:
  workflow_dispatch:

env:
  PORT: 6550
  USERNAME: ec2-user
  CLUSTER_NAME: cluster-teste-otlp-template-2
  INSTRUMENTATION_NAMESPACE: vkpr
  
jobs:
  obs-apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Vkpr
        shell: bash
        run: |
          curl -fsSL https://get.vkpr.net/ | CONTROL_SKIP="true" bash
          rit update repo --name="vkpr-cli" --version=1.3.9 

      - name: config vkpr credentials
        shell: bash
        run: |
            rit set credential --provider="aws" \
                --fields="accesskeyid,region,secretaccesskey" \
                --values="${{ secrets.AWS_ACCESS_KEY }},${{ secrets.AWS_REGION }},${{ secrets.AWS_SECRET_KEY }}"           

      - name: Check cluster state
        run: |
          HOST=`aws ec2 describe-instances --filters "Name=tag:Name,Values=cluster-teste-otlp-template-2"   --output text --query 'Reservations[*].Instances[*].PublicIpAddress'`
          while ! nc -z $HOST $PORT; do
            echo "waiting for cluster to be ready..."
            sleep 2
          done
          echo "Cluster Ready!"
          echo "Host=$HOST" >> $GITHUB_ENV
          
      - name: Write secret to file
        run: |
          echo "${{ secrets.KEYPAIR }}" > cert.pem
          chmod 600 cert.pem
          
      - name: Generate kube config with k3s  		
        run: |
          mkdir -p ~/.kube
          HOST=`aws ec2 describe-instances --filters 'Name=tag:Name,Values=cluster-teste-otlp-template-2'  --output text --query 'Reservations[*].Instances[*].PublicIpAddress'`
          ssh -i ./cert.pem -o StrictHostKeyChecking=no $USERNAME@$HOST "mkdir -p .kube && k3d kubeconfig get k3s > ~/.kube/config"
          scp -i ./cert.pem -o StrictHostKeyChecking=no $USERNAME@$HOST:~/.kube/config ~/.kube/config
          CERTIFICATE=`cat  ~/.kube/config |grep certificate-authority-data `
          sed -i "s|$CERTIFICATE|    insecure-skip-tls-verify: true|g" ~/.kube/config
          sed -i "s|0.0.0.0|$HOST|g" ~/.kube/config                       

      - name: Add OpenTelemetry Helm repository
        run: |
          helm repo add opentelemetry-helm https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo update

      - name: Install OpenTelemetry Collector
        run: |
          helm upgrade --install opentelemetry-operator opentelemetry-helm/opentelemetry-operator --wait --version 0.62.0 -n vkpr --create-namespace \
            --set manager.collectorImage.repository=otel/opentelemetry-collector-k8s \
            --set admissionWebhooks.certManager.enabled=false \
            --set admissionWebhooks.autoGenerateCert.enabled=true

      - name: Add Jaeger Helm repository
        run: |
          helm repo add jaeger-all-in-one https://raw.githubusercontent.com/hansehe/jaeger-all-in-one/master/helm/charts
          helm repo update

      - name: Install Jaeger
        run: |
          helm upgrade --install jaeger-all-in-one jaeger-all-in-one/jaeger-all-in-one --wait --version 0.1.12 -n vkpr \
            --set enableHttpOpenTelemetryCollector=true

      - name: Apply OpenTelemetry Collector configuration
        run: |
          kubectl apply -f - <<EOF
          apiVersion: opentelemetry.io/v1beta1
          kind: OpenTelemetryCollector
          metadata:
            name: otel
            namespace: vkpr
          spec:
            config:
              receivers:
                otlp:
                  protocols:
                    grpc:
                      endpoint: 0.0.0.0:4317
                    http:
                      endpoint: 0.0.0.0:4318
              processors:
                memory_limiter:
                  check_interval: 1s
                  limit_percentage: 75
                  spike_limit_percentage: 15
                batch:
                  send_batch_size: 10000
                  timeout: 10s
              exporters:
                otlp/jaeger:
                  endpoint: jaeger-all-in-one.vkpr:4317
                  tls:
                    insecure: true
              service:
                pipelines:
                  traces:
                    receivers: [otlp]
                    processors: [memory_limiter, batch]
                    exporters: [otlp/jaeger]
          EOF

      - name: Configure Kong OpenTelemetry plugin
        run: |
          kubectl apply -f kong-opentelemetry.yaml    

      - name: Apply OpenTelemetry auto-instrumentation
        run: |
          kubectl apply -f instrumentation.yaml -n $INSTRUMENTATION_NAMESPACE

      - name: Configure VKPR Prometheus prefix and labels
        shell: bash
        run: |
          export RANDOM_LETTERS=$(cat /dev/urandom | tr -dc 'a-z' | head -c 5)
          export REPLACEMENT="\"platform_${RANDOM_LETTERS}_\$1\""
          yq eval ".prometheus-stack.helmArgs.prometheus.prometheusSpec.remoteWrite[0].writeRelabelConfigs[0].replacement=$REPLACEMENT" -i $(pwd)/vkpr.yaml 
          yq eval ".prometheus-stack.helmArgs.prometheus.prometheusSpec.externalLabels.replacement=$REPLACEMENT" -i $(pwd)/vkpr.yaml
          sed -i "s/OBSERVABILITY_REPLACEMENT_LABEL/platform_$RANDOM_LETTERS/g" dashboard-overview.json      
      # Getting the UID from datasources
      - name: Getting uid from Prometheus datasource
        run: |
          export UID_METRICS_DASHBOARD=$(curl -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" --url https://grafana.apr.vee.codes/api/datasources | jq '.[] | select(.type == "prometheus")'.uid)
          echo "UID_METRICS = $UID_METRICS_DASHBOARD" 
          if [ -z "$UID_METRICS_DASHBOARD" ]; then
              echo "Error: The UID is empty. There may have been an issue."
              exit 1
          else
              echo "UID found: $UID_METRICS_DASHBOARD"
          fi          
          echo "UID_METRICS=$UID_METRICS_DASHBOARD" >> $GITHUB_ENV

      # Change UID from defaults dashboard
      - name: Changing uid of dashboard from Prometheus
        run: |
          jq '(.dashboard.panels[].datasource | select(.type == "prometheus")).uid |= ${{ env.UID_METRICS }}' "dashboard-overview.json" > cluster-teste-otlp-template-2-dashboard-overview.json
          cat cluster-teste-otlp-template-2-dashboard-overview.json

      #DELETE old Dashboards on Grafana API
      - name: Delete old Dashboards from project
        run: |
          TAG="cluster-teste-otlp-template-2"
          # Passo 1: Verificar se existem painéis com a tag específica
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://grafana.apr.vee.codes/api/search?tag=${TAG}" -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}")
          if [ "$response" -ne 200 ]; then
              echo "Não foram encontrados painéis com a tag '${TAG}'. Nenhum painel será excluído."
              exit 0
          fi
          # Passo 2: Obter lista de UIDs dos painéis com a tag específica
          panel_uids=$(curl -s -X GET "https://grafana.apr.vee.codes/api/search?tag=${TAG}" -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" | jq -r '.[] | .uid')
          
          # Passo 3: Excluir cada painel obtido no passo 1
          for panel_uid in $panel_uids; do
              response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "https://grafana.apr.vee.codes/api/dashboards/uid/${panel_uid}" -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}")
              if [ "$response" -eq 200 ]; then
                  echo "Painel com ID ${panel_uid} excluído com sucesso."
              else
                  echo "Erro ao excluir o painel com UID ${panel_uid}. Status code: ${response}"
              fi
          done
          
      #POST Dashboards on Grafana API
      - name: Post Overview dashboard
        run: |
          curl -X POST -d @cluster-teste-otlp-template-2-dashboard-overview.json \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" \
          --url https://grafana.apr.vee.codes/api/dashboards/db  

      - name: VKPR apply
        run: |
          shopt -s expand_aliases
          alias vkpr="rit vkpr"
          vkpr apply --path_to_file="$(pwd)/vkpr.yaml"


